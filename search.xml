<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第五篇文章</title>
      <link href="/2023/05/01/2022-11-01%E7%AC%AC%E4%BA%94%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/05/01/2022-11-01%E7%AC%AC%E4%BA%94%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第六篇文章</title>
      <link href="/2023/05/01/2022-11-02%E7%AC%AC%E5%85%AD%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/05/01/2022-11-02%E7%AC%AC%E5%85%AD%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> goland </category>
          
      </categories>
      
      
        <tags>
            
            <tag> goland </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三篇文章</title>
      <link href="/2023/04/24/2022-10-30%E7%AC%AC%E4%B8%89%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/04/24/2022-10-30%E7%AC%AC%E4%B8%89%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我的第三篇文章"><a href="#这是我的第三篇文章" class="headerlink" title="这是我的第三篇文章"></a>这是我的第三篇文章</h2>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云原生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四篇文章</title>
      <link href="/2023/04/24/2022-10-31%E7%AC%AC%E5%9B%9B%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/04/24/2022-10-31%E7%AC%AC%E5%9B%9B%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二篇文章</title>
      <link href="/2023/04/23/2022-10-29%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/04/23/2022-10-29%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我的第二篇文章"><a href="#这是我的第二篇文章" class="headerlink" title="这是我的第二篇文章"></a>这是我的第二篇文章</h2>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++变量和基本类型</title>
      <link href="/2022/04/22/post1/"/>
      <url>/2022/04/22/post1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>💛本文摘要💛</p><p><strong><code>c++  系列文章</code></strong></p><p><a href="https://blog.csdn.net/weixin_45043334/article/details/125380065">第2章 变量和基本类型</a><br><a href="https://blog.csdn.net/weixin_45043334/article/details/125402340">第3章 字符串、向量和数组</a><br><a href="https://blog.csdn.net/weixin_45043334/article/details/125449009">第4章 表达式</a><br><a href="https://blog.csdn.net/weixin_45043334/article/details/125647293">第5章 语句</a><br><a href="https://blog.csdn.net/weixin_45043334/article/details/125751253">第6章 函数</a><br><a href="https://blog.csdn.net/weixin_45043334/article/details/125850838">第8章 IO库</a><br><a href="https://blog.csdn.net/weixin_45043334/article/details/125947865">第9章 顺序容器</a><br><a href="https://blog.csdn.net/weixin_45043334/article/details/126002739">第10章 泛型算法</a><br><a href="https://blog.csdn.net/weixin_45043334/article/details/126246260">第11章 关联容器</a><br><a href="https://blog.csdn.net/weixin_45043334/article/details/126297355">第12章 动态内存</a><br><a href="https://blog.csdn.net/weixin_45043334/article/details/126394732">第13章 拷贝控制</a><br><a href="https://blog.csdn.net/weixin_45043334/article/details/126679427">第 14章 重载运算符</a><br><a href="https://blog.csdn.net/weixin_45043334/article/details/126728175?spm=1001.2014.3001.5502">第15章 面向对象程序设计</a><br><a href="https://blog.csdn.net/weixin_45043334/article/details/126808177">第 16章 模板与泛型编程</a></p></blockquote><h1 id="🍪第2章-变量和基本类型"><a href="#🍪第2章-变量和基本类型" class="headerlink" title="🍪第2章 变量和基本类型"></a>🍪第2章 变量和基本类型</h1><p>概述 c ++定义了几种基本的内置类型（如字符、整型、浮点数等），同时提供自动以数据类型的机制。</p><h2 id="🍮2-1-基本内置类型"><a href="#🍮2-1-基本内置类型" class="headerlink" title="🍮2.1 基本内置类型"></a>🍮2.1 基本内置类型</h2><p>基本内置类型包括算数类型和空类型。算数类型包括字符、整型数、浮点数和布尔值。</p><h3 id="🍭2-1-1-算术类型"><a href="#🍭2-1-1-算术类型" class="headerlink" title="🍭2.1.1 算术类型"></a>🍭2.1.1 算术类型</h3><div class="table-container"><table><thead><tr><th>类型</th><th>含义</th><th>最小尺寸</th></tr></thead><tbody><tr><td><code>bool</code></td><td>布尔类型</td><td>8bits</td></tr><tr><td><code>char</code></td><td>字符</td><td>8bits</td></tr><tr><td><code>wchar_t</code></td><td>宽字符</td><td>16bits</td></tr><tr><td><code>char16_t</code></td><td>Unicode字符</td><td>16bits</td></tr><tr><td><code>char32_t</code></td><td>Unicode字符</td><td>32bits</td></tr><tr><td><code>short</code></td><td>短整型</td><td>16bits</td></tr><tr><td><code>int</code></td><td>整型</td><td>16bits (在32位机器中是32bits)</td></tr><tr><td><code>long</code></td><td>长整型</td><td>32bits</td></tr><tr><td><code>long long</code></td><td>长整型</td><td>64bits （是在C++11中新定义的）</td></tr><tr><td><code>float</code></td><td>单精度浮点数</td><td>6位有效数字</td></tr><tr><td><code>double</code></td><td>双精度浮点数</td><td>10位有效数字</td></tr><tr><td><code>long double</code></td><td>扩展精度浮点数</td><td>10位有效数字</td></tr></tbody></table></div><p><strong>类型选择</strong></p><ol><li>当明确知道数值不为负时，选用无符号类型</li><li>在实际应用中，一般选用<code>int 类型</code>，如果大的话选用<code>long long</code>类型，一般short与 long不用</li><li>算术运算符，不要使用<code>char</code>和<code>bool</code>.因为char类型在一些机器上有符号，而到了另外机械就无符号。如果需要使用char，就指明是<code>signed char</code>或者<code>unsigned char</code></li><li>浮点数用<code>double</code>,因为float精度可能不够。long double没必要，消耗内存。<h3 id="🍭2-1-2-类型转换"><a href="#🍭2-1-2-类型转换" class="headerlink" title="🍭2.1.2 类型转换"></a>🍭2.1.2 类型转换</h3><strong>概述几种类型转换：</strong></li><li>非布尔值赋给布尔型，初始值为0则结果为false，否则为true。</li><li>浮点数转换为整数，结果<code>仅保留小数点前面的部分。</code></li><li>给无符号类型赋值时，如果超出它的表示范围，则<code>结果是初始值对无符号类型表示数值总数取模后的余数</code>,例如-1 赋给 8 位 unsigned char 的结果是 255。</li><li>给带符号类型赋值超出它的表达式，结果是<code>未定义</code>的，程序可能会崩掉<br>建议：尽量避免无法预知和依赖实际环境的行为</li></ol><p><strong>取模与取余区别：</strong><br><code>取余运算在取c值时，向0方向舍入，而取模运算在取c时，向负无穷方向舍入</code></p><ol><li>求整数商：c = [a / b]</li><li>计算模： r = a - c  * b;<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 举例 那题目当中的-1 举例</span><br><span class="line">-1 MOD 256</span><br><span class="line">第一步求商：</span><br><span class="line">c = [a / b] = -1 / 256 = -1 //结果为-0.0039,向负无穷取整为1</span><br><span class="line">第二步求模：</span><br><span class="line">r = a - c * b  =  (-1) - (-1) * 256  = 255</span><br><span class="line"></span><br><span class="line">//或者这样理解</span><br><span class="line"></span><br><span class="line">计算机在存储-1时是存储的-1的补码，对于8位unsigned char来说-1的原码为1000 0001，它的反码为（符号位不变，其他位置取反）1111 1110,则补码为（补码= 反码+1），1111 1111，换成十进制整数为255</span><br><span class="line"></span><br></pre></td></tr></table></figure><strong>含有无符号的整数</strong></li><li>一个表达式中既有无符号数又有int值时，int会被转换成无符号数。</li><li>无符号减无符号数，结果还是无符号数，如果是负值就等于取模后的值</li></ol><p><code>总结：无符号参与运算时，结果肯定不是负数，如果是负数则需要对结果取模</code></p><h3 id="🍭2-1-3-字面值常量"><a href="#🍭2-1-3-字面值常量" class="headerlink" title="🍭2.1.3 字面值常量"></a>🍭2.1.3 字面值常量</h3><p><strong>整型和浮点型字面值</strong><br><code>整型字面值中 0 开头的整数是 8 进制，0x 开头的整数是十六进制。</code></p><p>浮点型字面值可以用小数或科学计数法表示，科学计数法中的指数部分用 E 或 e 标识。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926</span>   <span class="number">0.</span>  <span class="number">0e0</span>  <span class="number">.001</span>  <span class="number">3.14159E2</span></span><br></pre></td></tr></table></figure><br><strong>字符和字符串字面值</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;c&#x27;</span>            字符字面值</span><br><span class="line"><span class="string">&quot;Hell world&quot;</span>   字符串字面值比实际值多<span class="number">1</span>，因为它的最后多一个<span class="string">&#x27;\0&#x27;</span>（空字符）</span><br><span class="line">               hello world被看做一个整体，只要字符串字面值位置仅有空格、缩进、换行符分隔，就看做一个整体</span><br></pre></td></tr></table></figure><br><strong>转义序列</strong></p><div class="table-container"><table><thead><tr><th>换行符：\n</th><th>横向制表符：\t</th><th>报警符：\a</th></tr></thead><tbody><tr><td>纵向制表符：\v</td><td>退格符：\b</td><td><strong>双引号：\“</strong></td></tr><tr><td><strong>反斜线：\\</strong></td><td><strong>单引号：\‘</strong></td><td><strong>问号：\?</strong></td></tr><tr><td>回车符：\r</td><td>进纸符：\f</td></tr></tbody></table></div><p><strong>布尔字面值和指针字面值</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span> <span class="literal">false</span>    是布尔类型的字面值</span><br><span class="line">nullptr       是指针字面值</span><br></pre></td></tr></table></figure></p><h2 id="🍮2-2-变量"><a href="#🍮2-2-变量" class="headerlink" title="🍮2.2 变量"></a>🍮2.2 变量</h2><p>变量 ：提供一个具名的、可供程序操作的存储空间<br>对象  ：一块能存储数据并具有某种类型的内存<br><code>对于c++,而言变量和对象可以互换使用</code></p><h3 id="🍭2-2-1-变量的定义"><a href="#🍭2-2-1-变量的定义" class="headerlink" title="🍭2.2.1 变量的定义"></a>🍭2.2.1 变量的定义</h3><p><strong>初始化</strong></p><p>对象在创建的过程中就获得了一个值，此时这个对象被初始化。</p><p><code>初始化和赋值的区别：</code></p><ul><li>初始化不是赋值，初始化是创建一个变量时赋予其一个初始值</li><li>赋值是把对象的当前值擦除，而以一个新值来代替。</li></ul><p><strong>列表初始化</strong><br>用一对{ }来表示列表初始化<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>; </span><br><span class="line"><span class="type">int</span> i = &#123;<span class="number">0</span>&#125;; </span><br><span class="line"><span class="type">int</span> i &#123;<span class="number">0</span>&#125;; </span><br><span class="line"><span class="type">int</span> <span class="title function_">i</span> <span class="params">(<span class="number">0</span>)</span>;</span><br></pre></td></tr></table></figure><br><code>特点</code>:如果使用列表初始化，且初始值存在，丢失情况，则编译器会报错<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">double</span> ld = <span class="number">3.141592</span>；</span><br><span class="line"><span class="type">int</span> a&#123;ld&#125;；                <span class="comment">//错误，信息丢失，精度问题，转换失败</span></span><br><span class="line"><span class="type">int</span> c(ld), d=ld;           <span class="comment">//正确</span></span><br></pre></td></tr></table></figure></p><p><strong>默认初始化</strong></p><ul><li>定义在函数体内的内置类型的对象没有初始化，则其值为未定义。</li><li>定义在函数体外的内置类型的对象没有初始化，则其值为0（string为空，int型为0）</li></ul><p>全局变量没有初始化，系统会自动初始化为0，局部变量没有初始化，未定义，会报错。<br><code>建议初始化每一个内置类型的变量。</code></p><h3 id="🍭2-2-2-变量声明和定义"><a href="#🍭2-2-2-变量声明和定义" class="headerlink" title="🍭2.2.2 变量声明和定义"></a>🍭2.2.2 变量声明和定义</h3><p>声明：使得名字让程序知道     (不申请存储空间)<br>定义：创建与名字关联的实体（也就是初始化，需要申请存储空间）</p><p><code>要声明一个变量加 extern，声明变量不能赋值。</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> i;     <span class="comment">// 声明 i</span></span><br><span class="line"><span class="type">int</span> j;            <span class="comment">// 声明并定义j；</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> i = <span class="number">1</span>; <span class="comment">// 定义 i，初始化抵消了 extern 的作用。</span></span><br></pre></td></tr></table></figure><br>变量能且只能被定义一次，但是可以被多次声明<br><code>c++是静态类型语言，其含义是在编译阶段检查类型。</code></p><h3 id="🍭2-2-3-标识符"><a href="#🍭2-2-3-标识符" class="headerlink" title="🍭2.2.3 标识符"></a>🍭2.2.3 标识符</h3><p><code>标识符组成：字母、数字、下划线。不能以数字开头，对大小写敏感。标识符的长度没有限制。</code></p><p>变量命名规范：</p><ul><li>标识符要体现其实际含义。</li><li>变量名一般用小写字母，index,不要使用Index或INDEX</li><li>用户自定义的类型一般以大写字母开头。Sales_item</li><li>包含多个单词的标识符，使用驼峰命名法或使用下划线连接不同单词。</li><li>对于嵌套作用域，可以在内层作用域中重新定义外层作用域已有的名字，但是最好不要这样做。<h3 id="🍭2-2-4-名字作用域"><a href="#🍭2-2-4-名字作用域" class="headerlink" title="🍭2.2.4 名字作用域"></a>🍭2.2.4 名字作用域</h3></li><li>第一次使用变量时再定义它。</li><li>嵌套作用域，作用域一旦声明了，那么它所嵌套的所有作用域中都能访问该名字，允许在内层作用域中重新定义外层已有的作用域</li></ul><p><code>实际就是：局部变量覆盖全局变量</code></p><h2 id="🍮2-3-复合类型"><a href="#🍮2-3-复合类型" class="headerlink" title="🍮2.3 复合类型"></a>🍮2.3 复合类型</h2><p>复合类型是基于其他类型定义的类型，例如<code>指针和引用</code></p><h3 id="🍭2-3-1-引用"><a href="#🍭2-3-1-引用" class="headerlink" title="🍭2.3.1 引用"></a>🍭2.3.1 引用</h3><p><code>引用就是给对象起别名</code></p><p><strong>引用的本质就是指针常量，指针常量就是指针所指对象的值可以变，但是指针所指的对象不可以变，因此他和一个对象绑定好后，通过引用来改变值，但是不可以在重新绑定到另一个对象上</strong></p><p><strong>引用总结</strong></p><ul><li><code>引用必须初始化</code></li><li><code>引用的初始值必须是一个对象，不能是字面值，如果想要是字面值需要加const</code></li><li><code>引用不是对象，所以不能定义引用的引用，也不能定义引用的指针</code></li><li>对引用的所有操作都对与之绑定的对象的操作</li><li><code>引用必须绑定一个对象上，且不能重新绑定到另一个对象上</code></li><li>引用的类型与绑定的类型要匹配</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>；</span><br><span class="line"><span class="type">int</span> &amp;r = i;</span><br></pre></td></tr></table></figure><h3 id="🍭2-3-2-指针"><a href="#🍭2-3-2-指针" class="headerlink" title="🍭2.3.2 指针"></a>🍭2.3.2 指针</h3><p><code>在块作用域内，指针如果没有被初始化，值将不确定。</code><br>指针类型被用于指定它所指向的对象的类型，二者要匹配<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">double</span> *dp = &amp;i;   <span class="comment">// 错误</span></span><br><span class="line"><span class="type">int</span> *ip = i;       <span class="comment">// 错误，但 int *ip = 0; 是正确的</span></span><br><span class="line"><span class="type">int</span> *p = &amp;i;       <span class="comment">//正确</span></span><br></pre></td></tr></table></figure><br><strong><code>指针与引用区别</code></strong></p><ul><li>指针是一个对象而引用不是</li><li>指针可以重定向，引用不可以；</li><li>有指向指针的指针，没有指向引用的引用；</li><li>指针不需要在定义时赋初值而引用需要。</li><li>不能定义指向引用的指针。可以定义指向指针的引用。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p; </span><br><span class="line"><span class="type">int</span>* &amp;r = p;      <span class="comment">// r是对指针p的引用（指针的引用）</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> &amp;r = i;</span><br><span class="line"><span class="type">int</span>&amp; *p = &amp;r      <span class="comment">//指向引用的指针，错误的，因为r不是对象，没有地址。</span></span><br></pre></td></tr></table></figure><p>利用解引用符（<em>）可以访问指针指向的对象。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">42</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;i;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *p &lt;&lt;<span class="built_in">endl</span>;  结果为<span class="number">42</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br><em>*空指针</em></em><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p = nullptr; <span class="comment">// 推荐这种</span></span><br><span class="line"><span class="type">int</span> *p = <span class="number">0</span>; </span><br><span class="line"><span class="type">int</span> *p = <span class="literal">NULL</span>;    <span class="comment">// NULL 是在头文件 cstdlib 中定义的预处理变量，值为 0。</span></span><br></pre></td></tr></table></figure><br><code>建议初始化所有指针</code></p><p><strong>赋值和指针</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">42</span>;</span><br><span class="line"><span class="type">int</span>  *p = &amp;i;</span><br><span class="line">*p = <span class="number">30</span>;</span><br></pre></td></tr></table></figure><br>说明：</p><ul><li>指针所指的对象变了（i 的值变了）</li><li>指针本身并没有变化 （i 的地址没变），<code>指针指的是地址，而不是值</code></li></ul><p><strong>void*指针</strong><br>void* 指针是特殊的指针类型，可以存放任意对象的地址。它的用处比较有限。(不使用)</p><h3 id="🍭2-3-3-理解复合类型的声明"><a href="#🍭2-3-3-理解复合类型的声明" class="headerlink" title="🍭2.3.3 理解复合类型的声明"></a>🍭2.3.3 理解复合类型的声明</h3><p>一条声明语句是由一个基本数据类型和后面的声明符列表组成的。</p><p>引用符 &amp; 和指针符 <em> 都是类型说明符，类型说明符是声明符的一部分。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">1024</span>, *p = &amp;i, &amp;r = i;</span><br><span class="line"><span class="type">int</span> *p, p2;   <span class="comment">//p是指向int的指针，p2是int</span></span><br></pre></td></tr></table></figure><br><em>*指向指针的指针</em></em><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i  = <span class="number">1024</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;i;      <span class="comment">//p指向一个int 型数</span></span><br><span class="line"><span class="type">int</span> **p1 = &amp;p;    <span class="comment">//p1指向一个int 型指针</span></span><br></pre></td></tr></table></figure><br><img src="https://img-blog.csdnimg.cn/9910119c45a6472a87272c28931eaab0.png" alt="在这里插入图片描述"></p><p><strong>指向指针的引用</strong></p><p><code>引用本身不是一个对象，所以没有指向引用的指针,但是指针是对象，存在对指针的引用</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i =  <span class="number">42</span>;</span><br><span class="line"><span class="type">int</span> *p ;       <span class="comment">//p是int型指针</span></span><br><span class="line"><span class="type">int</span> *&amp;r = p;  <span class="comment">//指向指针的引用</span></span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> &amp;r = i;</span><br><span class="line"><span class="type">int</span>&amp; *p = &amp;r      <span class="comment">//指向引用的指针，错误的，因为r不是对象，没有地址。</span></span><br></pre></td></tr></table></figure><br>想要理解r的类型到底是什么，可以<code>从右往左读</code>，离变量最近的符号（本例中是&amp;r符号）<code>，因此r是一个</code>引用<code>，声明符以外的部分可以确定</code>r引用的类型<code>是什么。本例中</code>&amp;左边是*<code>，所以r引用的是一个</code>指针`</p><h2 id="🍮2-4-const限定符"><a href="#🍮2-4-const限定符" class="headerlink" title="🍮2.4 const限定符"></a>🍮2.4 const限定符</h2><ul><li><code>const对象必须初始化</code>，因为const对象一旦创建，其值不能改变</li><li>const指向的对象，不能改变，但是仍然可以和int一样，进行<code>运算</code></li><li>默认情况下，const对象<code>只在文件内有效</code></li><li>如果想要在不同文件中<code>共享const</code>，必须在定义变量之前添加<code>exten关键字</code></li></ul><h3 id="🍭2-4-1-const的引用"><a href="#🍭2-4-1-const的引用" class="headerlink" title="🍭2.4.1 const的引用"></a>🍭2.4.1 const的引用</h3><ul><li><code>引用必须初始化</code>，因此常量引用也必须初始化。</li><li>常量引用是对 const 的引用，对象可以是<code>常量</code>也可以是<code>非常量</code></li><li>不能用非常量引用指向一个常量对象。可以用常量引用指向一个非常量对象。</li><li>引用的类型必须与其所引用对象的类型一致，<code>有俩种情况特殊，下面详细说</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">42</span>;           <span class="comment">//非常量</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> j  = <span class="number">42</span>;    <span class="comment">//常量</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;p  = i;   <span class="comment">//正确</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;p  = j;   <span class="comment">//正确,常量引用的对象既可以是常量也可以是非常量 </span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;p =  <span class="number">10</span>;  <span class="comment">//正确</span></span><br><span class="line"><span class="type">int</span> &amp;p = <span class="number">10</span>;         <span class="comment">//错误      </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//非常量引用不能指向常量对象</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> p = <span class="number">66</span>;</span><br><span class="line"><span class="type">int</span> &amp;r = p;         <span class="comment">//错误</span></span><br></pre></td></tr></table></figure><p><strong>引用的类型必须与其所引用对象的类型一致，<code>有俩种情况特殊，下面详细说</code></strong></p><ol><li>初始化常量引用时允许用任意表达式作为初始值（包括常量表达式），只要该表达式结果可以转换为引用的类型。</li><li>当用常量引用绑定一个非常量对象时，不能通过引用改变引用对象的值，但是可以通过其他方式改变值。常量指针也一样。</li></ol><p><strong>举例</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> val = <span class="number">3.1415</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;p = val;   <span class="comment">//正确</span></span><br></pre></td></tr></table></figure><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i  =<span class="number">42</span>;</span><br><span class="line"><span class="type">int</span> &amp;r1 = i;         <span class="comment">//引用r1绑定对象i</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;r2 = i;  <span class="comment">//常量引用r2 绑定i,此时不允许通过r2来修改i的值，但是可以用r1来修改i 的值</span></span><br><span class="line"></span><br><span class="line">r1 = <span class="number">0</span>;     <span class="comment">//正确，i 的值修改为0</span></span><br><span class="line">r2 = <span class="number">0</span>;    <span class="comment">//错误</span></span><br></pre></td></tr></table></figure></p><h3 id="🍭2-4-2-指针和const"><a href="#🍭2-4-2-指针和const" class="headerlink" title="🍭2.4.2 指针和const"></a>🍭2.4.2 指针和const</h3><ul><li>指向常量的指针和指向常量的引用用法相似，既可以指向常量，也可以指向非常量，如果指向非常量，那莫这个非常量对象的值不可以不可以通过指针，来改变，可以通过其他途径改变。</li></ul><p><strong>指针常量与常量指针区别</strong></p><ul><li>指针常量：指针所指的对象值<code>可以变</code>，但是指针所指的<code>地址不可以变</code>    int * const p = &amp;r</li><li>常量指针：指针所指的对象的值<code>不可以变</code>，但是指针所指的<code>地址可以变</code> const int * p = &amp;r</li></ul><h3 id="🍭2-4-3-顶层const"><a href="#🍭2-4-3-顶层const" class="headerlink" title="🍭2.4.3 顶层const"></a>🍭2.4.3 顶层const</h3><ul><li><code>顶层const表示指针常量</code>，指针本身是一个常量，地址不能变，但是值可以修改。</li><li><code>底层const表示常量指针</code>， 指针所指的值是一个常量，不可以修改，但是地址可以变。</li><li>顶层const的指针，表示该指针是const对象，因此必须初始化，而底层const不需要初始化。</li><li><code>顶层const对任意数据类型都适用，但是底层const只用于引用和指针</code></li></ul><p><strong>指针类型既可以是顶层 const 也可以是底层 const，因为引用只能是底层 const，常量引用为底层 const，不存在顶层 const 的引用。</strong><br><br/><br><strong>怎么区分是顶层const还是底层const,最简单的方法</strong></p><ul><li>对于指针和引用来说，顶层const在右边，底层const在左边。对于其他类型来说，全部都是顶层cosnt.(<code>记住就能理解了</code>)<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span>* <span class="type">const</span> p1 = p2; <span class="comment">// 从右向左读，右侧const是顶层const，表明p3是一个常量，左侧const是底层const，表明指针所指的对象是一个常量</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* p3 = &amp;c;       <span class="comment">// 这是一个底层const，允许改变 p2 的值（常量指针）----const在左边为底层</span></span><br><span class="line"><span class="type">int</span>* <span class="type">const</span> p4 = &amp;i;       <span class="comment">// 这是一个顶层const，不能改变 p1 的值（指针常量）----cosnt在右边为顶层</span></span><br></pre></td></tr></table></figure></li></ul><p>执行对象的拷贝操作时，不能将底层 const 拷贝给非常量，反之可以，非常量将会转化为常量。</p><h3 id="🍭2-4-4-constexpr和常量表达式"><a href="#🍭2-4-4-constexpr和常量表达式" class="headerlink" title="🍭2.4.4 constexpr和常量表达式"></a>🍭2.4.4 constexpr和常量表达式</h3><p><code>常量表达式是指值不会改变并且在编译过程就能得到计算结果的表达式。</code><br><code>字面值属于常量表达式，由常量表达式初始化的 const 对象也是常量表达式。</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> i = <span class="number">32</span>              <span class="comment">//常量表达式</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> j = i + <span class="number">1</span>           <span class="comment">// 常量表达式</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> sum = get_size()    <span class="comment">//不是常量表达式，尽管 sum 是常量，但它的具体值等到运行时才知道。</span></span><br></pre></td></tr></table></figure><p><strong>constexpr变量</strong></p><ul><li>在一个复杂的系统中，很难分辨一个初始值到底是不是常量表达式，此时通过把变量声明为<code>constexpr</code>类型，使得编译器自动帮我们验证。</li><li><code>由 constexpr 声明的变量一定是常量不能是普通函数，必须用常量表达式初始化。</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">constexpr <span class="type">int</span> sz = size(); <span class="comment">//只有当 size() 是一个 constexpr 函数时这才是一条正确的声明语句。</span></span><br><span class="line">constexpr <span class="type">int</span> mf = <span class="number">20</span>;     <span class="comment">//常量表达式</span></span><br><span class="line">constexpr <span class="type">int</span> limit = mf + <span class="number">1</span>;   <span class="comment">// mf + 1是常量表达式</span></span><br></pre></td></tr></table></figure><p><strong>字面值类型</strong></p><ul><li>算术类型、引用、指针都属于字面值类型，自定义类则不属于。</li><li>cosntexpr 指针的初始值必须是<code>nullptr 或 0 或存储于固定地址的对象</code>。</li><li>函数体之外的对象和静态变量的地址都是固定不变的.,可以用constexpr初始化，而函数体内的变量不能用contexpr.</li></ul><p><strong>指针和constexpr</strong></p><p><code>contexpr所定义的对象都是顶层const</code>，仅对指针有效<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> *p = nullptr;     <span class="comment">// p 是一个指向整型常量的指针(指针常量)底层const</span></span><br><span class="line">constexpr <span class="type">int</span> *q = nullptr; <span class="comment">// q 是一个指向整数的常量指针(常量指针)定义成了顶层const</span></span><br></pre></td></tr></table></figure></p><p><strong>const与constexpr区别</strong></p><ul><li>constexpr限定了变量是编译器常量，即变量在编译过程中就可以得到结果。</li><li>const 未区分是编译器常量还是运行期常量。即 const 变量可以在运行期间初始化，只不过是初始化后的值就不能再改变了。</li><li>constexpr 变量是真正的“常量”，而 const 现在一般只用来表示 “只读”。</li></ul><h2 id="🍮2-5-处理类型"><a href="#🍮2-5-处理类型" class="headerlink" title="🍮2.5 处理类型"></a>🍮2.5 处理类型</h2><h3 id="🍭2-5-1-类型别名"><a href="#🍭2-5-1-类型别名" class="headerlink" title="🍭2.5.1 类型别名"></a>🍭2.5.1 类型别名</h3><p>目前有俩种方法来定义类型别名</p><ul><li>typedef</li><li>using<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> wages;  <span class="comment">// 使用 typedef 关键字</span></span><br><span class="line">using wages = <span class="type">int</span>;  <span class="comment">// 使用 using 关键字进行别名声明</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> wages base, *p; <span class="comment">// base 是 double 的别名，p 是 double* 的别名。</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>指针、常量和类型别名</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">char</span>* pstring; </span><br><span class="line"><span class="type">const</span> pstring cstr = <span class="number">0</span>; <span class="comment">// 注意：const 是一个指向 char 的常量指针。不能采用直接替换的方式将其理解为 const char* cstr = 0，这是错误的。</span></span><br></pre></td></tr></table></figure></p><h3 id="🍭2-5-2-auto类型说明符"><a href="#🍭2-5-2-auto类型说明符" class="headerlink" title="🍭2.5.2 auto类型说明符"></a>🍭2.5.2 auto类型说明符</h3><ul><li>auto让编译器自动帮你识别，表达式所属的类型</li><li>但是与int 不同的是，auto让编译器通过初始值来推算变量的类型，所以<code>auto 必须要有初始值</code></li><li>auto 可以在一条语句中声明多个变量，但是多个变量必须是同一个基本数据类型（整型与整型指针和整型引用算一个类型）。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> vall, sum;</span><br><span class="line"><span class="keyword">auto</span> item = vall + sum  <span class="comment">//自动推断为int类型</span></span><br></pre></td></tr></table></figure><p><strong>复合类型、常量和auto</strong></p><p><strong>编译器推断出的 auto 类型有时和初始值并不一样，编译器会进行适当的调整：</strong></p><ul><li>auto 根据引用来推断类型时会以引用对象的类型作为 auto 的类型。</li><li>auto 一般会忽略掉顶层 const，因此对于非指针类型的常量对象，auto 推断出的结果是不含 const 的。如果希望 auto 是一个顶层 const，需要明确指出。</li><li>auto 会保留底层 const。</li></ul><p><code>概括一下就是 auto 会忽略引用与顶层 const。</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> ci = <span class="number">1</span>, cr = ci;</span><br><span class="line"><span class="keyword">auto</span> b = ci;       <span class="comment">// b 是一个普通的 int。</span></span><br><span class="line"><span class="keyword">auto</span> c = cr;       <span class="comment">// c 是一个普通的 int。</span></span><br><span class="line"><span class="type">const</span> <span class="keyword">auto</span> d = ci; <span class="comment">// d 是一个 const int</span></span><br><span class="line"><span class="keyword">auto</span> &amp;e = ci;      <span class="comment">// e 是一个常量引用（常量引用是底层 const）。注意这个微妙的地方。</span></span><br><span class="line"><span class="keyword">auto</span> f = &amp;ci;      <span class="comment">// f 是一个 const int*（位于左边的 const 是底层 const）</span></span><br></pre></td></tr></table></figure><p>int 与 int *、int &amp; 是一个基本数据类型，而 const int 与 int 不是一种类型。<br>用 auto 定义引用时，必须用 &amp; 指明要定义的是引用。</p><h3 id="🍭2-5-3-decltype类型指示符"><a href="#🍭2-5-3-decltype类型指示符" class="headerlink" title="🍭2.5.3 decltype类型指示符"></a>🍭2.5.3 decltype类型指示符</h3><ul><li>希望从表达式的类型推断出要定义的变量的类型。但是不需要进行初始化时，可以使用decltype。</li><li>如果如果 decltype 使用的表达式是一个变量，则它返回<code>该变量的类型（包括顶层 const 和引用在内）。</code></li><li>decltype与auto不同，decltype不会忽略引用和顶层const</li><li>引用从来都是作为对象的别名出现，只有在 decltype 处是例外。</li></ul><p><code>当获得的对象类型是引用时，必须初始化</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> ci = <span class="number">0</span>, &amp;cj = ci;</span><br><span class="line">decltype(ci) x = <span class="number">0</span>;  <span class="comment">// x 的类型是 const int</span></span><br><span class="line">decltype(cj) y = x;  <span class="comment">// y 的类型是 const int&amp;</span></span><br><span class="line">decltype(cj) z;      <span class="comment">//错误 z 是一个引用，必须初始化</span></span><br></pre></td></tr></table></figure></p><p><strong>decltype和引用</strong></p><ul><li>如果decltype使用的表达式不是一个变量，则decltype返回表达式结果对应的类型</li><li>如果表达式的内容是解引用操作，那么decltype将得到引用类型</li><li>decltype((variable))—-双层括号的结果永远是引用<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">6</span>, &amp;r = i, *p;</span><br><span class="line">decltype(r+<span class="number">0</span>) b;      <span class="comment">// b 的类型是 int，因为 r+0 的结果类型是 int。</span></span><br><span class="line">decltype(*p) c = i;   <span class="comment">// c 的类型是 int&amp;。</span></span><br><span class="line">decltype((i)) d = i;  <span class="comment">// d 的类型是 int&amp;。</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="🍮2-6-自定义数据结构"><a href="#🍮2-6-自定义数据结构" class="headerlink" title="🍮2.6 自定义数据结构"></a>🍮2.6 自定义数据结构</h2><h3 id="🍭2-6-1-定义Sales-data类型"><a href="#🍭2-6-1-定义Sales-data类型" class="headerlink" title="🍭2.6.1 定义Sales_data类型"></a>🍭2.6.1 定义Sales_data类型</h3><p><code>struct+类名+类体+分号。类体可以为空。</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Sales_data</span>&#123;</span>&#125;;      <span class="comment">//结尾注意有分号</span></span><br><span class="line"></span><br><span class="line">对象定义有俩种方式</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Sales_data</span>&#123;</span>&#125; students;   <span class="comment">//方式1</span></span><br><span class="line">Sales_data students;            <span class="comment">//方式2</span></span><br></pre></td></tr></table></figure></p><p><code>定义类时可以给数据成员提供类内初始值以进行初始化。没有类内初始值的成员则被默认初始化。</code><br><code>类内初始值可以放在花括号中或等号的右边，不能使用圆括号。</code></p><h3 id="🍭2-6-2-使用Sales-data类（没东西，暂时省略hhh）"><a href="#🍭2-6-2-使用Sales-data类（没东西，暂时省略hhh）" class="headerlink" title="🍭2.6.2 使用Sales_data类（没东西，暂时省略hhh）"></a>🍭2.6.2 使用Sales_data类（没东西，暂时省略hhh）</h3><h3 id="🍭2-6-3-编写自己的头文件"><a href="#🍭2-6-3-编写自己的头文件" class="headerlink" title="🍭2.6.3 编写自己的头文件"></a>🍭2.6.3 编写自己的头文件</h3><ul><li>类通常定义在头文件中，类所在头文件的名字应与类的名字一样。</li><li>头文件通常定义那些只能被定义一次的实体，比如类、const、constexpr 等。</li><li>头文件一旦改变，相关的源文件必须重新编译以获取更新过的声明。</li></ul><p><strong>预处理器概述</strong></p><p>确保头文件多次包含仍能安全工作的常用技术是预处理器。</p><p><code>预处理变量有两种状态：已定义和未定义。一般把预处理变量的名字全部大写。</code></p><p><code>整个程序中的预处理变量包括头文件保护符必须唯一，通常基于头文件中类的名字来构建保护符的名字，以确保其唯一性。</code></p><p>c++ 中包含三个头文件保护符：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- <span class="meta">#<span class="keyword">define</span>：把一个名字设定为预处理变量`</span></span><br><span class="line">- <span class="meta">#<span class="keyword">ifdef</span>  :当且仅当变量已定义时为真。`</span></span><br><span class="line">- <span class="meta">#<span class="keyword">ifndef</span>：当且仅当变量已定义时为真，一旦检查结果为真，则执行后续操作直到遇到 #<span class="keyword">endif</span> 为止</span></span><br><span class="line">- <span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><br>预处理变量无视作用域的规则，作用范围是文件内</p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
